# Generated by scripts/generateMeshObj.php - do not edit manually
<?php

$nodeSpacing = 9.375;
$meshInset = 1;
$meshWidth = 1;
$meshNodeSize = 2.5;
$trussTop = 480;
$nodeInset = 15.8125;
$cubeTop = 444;
$cubeSide = 491;
$cylinderRadius = 180;

$vertices = array();
$faces = array();

$vi = 1;
$vi0 = $vi;
$vi1 = $vi+1;
$vi2 = $vi+2;
$vi3 = $vi+3;

$vx0 = $vx1 = 0;
$vy0 = $vy1 = 0;
$vz0 = $vz1 = 0;

function incv() {
  global $vi, $vi0, $vi1, $vi2, $vi3;
  $vi += 4;
  $vi0 = $vi;
  $vi1 = $vi+1;
  $vi2 = $vi+2;
  $vi3 = $vi+3;
}

function face() {
  global $vertices, $faces;
  global $vi, $vi0, $vi1, $vi2, $vi3;
  global $vx0, $vx1, $vy0, $vy1, $vz0, $vz1;
  
  $vertices []= "v $vx0 $vy0 $vz0";
  $vertices []= "v $vx1 $vy0 $vz1";
  $vertices []= "v $vx0 $vy1 $vz0";
  $vertices []= "v $vx1 $vy1 $vz1";
  
  $faces []= "f $vi0 $vi1 $vi2";
  $faces []= "f $vi2 $vi1 $vi3";
  incv();  
}

// Cube faces
$vertices []= "# Cube";
$faces []= "# Cube";
for ($x = 0; $x < 50; ++$x) {
  $isDoor = ($x >= 20) && ($x < 30);
  $pixels = $isDoor ? 34 : 45;
  $base = $isDoor ? $cubeTop - $nodeSpacing * ($pixels-1) : 0;

  // Front
  $vx0 = $nodeInset - 0.5*$meshWidth + $x*$nodeSpacing;
  $vx1 = $vx0 + $meshWidth;
  $vy0 = $base;
  $vy1 = $trussTop;  
  $vz0 = $vz1 = -$meshInset;
  face();
  
  // Right
  $vx0 = $vx1 = $cubeSide - $meshInset;
  $vz0 = -($nodeInset - 0.5*$meshWidth + $x*$nodeSpacing);
  $vz1 = $vz0 - $meshInset;    
  face();
  
  // Back 
  $vx0 = $cubeSide - $nodeInset + 0.5*$meshWidth - $x*$nodeSpacing;
  $vx1 = $vx0 - $meshWidth;
  $vz0 = $vz1 = -($cubeSide - $meshInset);
  face();
  
  // Left
  $vx0 = $vx1 = $meshInset;
  $vz0 = -($cubeSide - $nodeInset + 0.5*$meshWidth - $x*$nodeSpacing);
  $vz1 = $vz0 + $meshWidth;
  face();
  
  for ($y = 0; $y < $pixels; ++$y) {
    $vy0 = $cubeTop - $y*$nodeSpacing - 0.5*$meshNodeSize;
    $vy1 = $vy0 + $meshNodeSize;
    
    // Front
    $vx0 = $nodeInset - 0.5*$meshNodeSize + $x*$nodeSpacing;
    $vx1 = $vx0 + $meshNodeSize;
    $vz0 = $vz1 = -($meshInset);
    face();
    
    // Right
    $vx0 = $vx1 = $cubeSide - $meshInset;
    $vz0 = -($nodeInset - 0.5*$meshNodeSize + $x*$nodeSpacing);
    $vz1 = $vz0 - $meshNodeSize;
    face();
    
    // Back
    $vx0 = $cubeSide - $nodeInset + 0.5*$meshNodeSize - $x*$nodeSpacing;
    $vx1 = $vx0 - $meshNodeSize;
    $vz0 = $vz1 = -($cubeSide - $meshInset);
    face();
    
    // Left
    $vx0 = $vx1 = $meshInset;
    $vz0 = -($cubeSide - $nodeInset + 0.5*$meshNodeSize - $x*$nodeSpacing);
    $vz1 = $vz0 + $meshNodeSize;
    face();
  }
}

// Cylinder
$vertices []= "# Cylinder";
$faces []= "# Cylinder";
for ($a = 0; $a < 120; ++$a) {
  $angle = deg2rad(3 * $a);
  $sin = round(sin($angle), 4);
  $cos = round(cos($angle), 4);

  $isDoor = (($a + 20) % 30) < 10;
  $pixels = $isDoor ? 32 : 43;
  $base = $isDoor ? $cubeTop - $nodeSpacing * ($pixels+1) : 0;
  $yb = $base;

  // Base X/Z position
  $xb = $cubeSide * 0.5 + ($cylinderRadius - $meshInset) * $sin;
  $zb = $cubeSide * 0.5 - ($cylinderRadius - $meshInset) * $cos;

  // Origin X/Z position of mesh rect
  $xo = -$cos * 0.5 * $meshWidth;
  $zo = -$sin * 0.5 * $meshWidth;

  // Origin X/Z position of mesh nodes
  $xno = -$cos * 0.5 * $meshNodeSize;
  $zno = -$sin * 0.5 * $meshNodeSize;

  $vy0 = $base;
  $vy1 = $cubeTop;  
  $vx0 = $xb + $xo;
  $vx1 = $xb - $xo;
  $vz0 = -($zb + $zo);
  $vz1 = -($zb - $zo);  
  face();

  for ($p = 0; $p < $pixels; ++$p) {
    $vy0 = $cubeTop - ($p+2) * $nodeSpacing - 0.5 * $meshNodeSize;
    $vy1 = $vy0 + $meshNodeSize;

    $vx0 = $xb + $xno;
    $vx1 = $xb - $xno;
    $vz0 = -($zb + $zno);
    $vz1 = -($zb - $zno);
    
    face();
  }

}

echo implode("\n", $vertices)."\n";
echo implode("\n", $faces)."\n";
