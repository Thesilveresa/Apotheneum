<?php
$motors = array();
$lights = array();
$vertices = array();
$sides = array();
$sides2 = array();

$sin60 = sin(deg2rad(60));
$cos60 = cos(deg2rad(60));
$height = 36 * $sin60;
$midpoint = 18 * tan(deg2rad(30));

$tris = 0;

for ($r = 0; $r < 4; ++$r) {
  $n = (7 - 2*$r);
  $flip = true;

  for ($c = 0; $c < $n; ++$c) {
    
    ++$tris;
    
    $x = 18 * ($c - ($n-1)/2);

    $yb = $height * (3 - $r);
    $yc = $yb + $height * .5;
    $y = $yb + ($flip ? ($height - $midpoint) : $midpoint);

    $inset = 2.0 / 36.0;
    $xin = 36 * $inset;
    $yin = $height * $inset;

    $x0 = $x - 18 + $xin;
    $x1 = $x + 18 - $xin;
    $y0 = $yc - $height/2 + $cos60 * $yin;
    $y1 = $yc + $height/2 - $sin60 * $yin;
    $z = 1;
    $zd = .5;

    $lights []= '        { "x": '.$x.', "y": '.$yc.', "z": 2 }';
    $motors []= '        { "x": '.$x.', "y": '.$yc.' }';

    if ($flip) {
      $v1x = $x0;
      $v2x = $x;
      $v3x = $x1;
      $v1y = $y1;
      $v2y = $y0;
      $v3y = $y1;
    } else {
      $v1x = $x0;
      $v2x = $x1;
      $v3x = $x;
      $v1y = $y0;
      $v2y = $y0;
      $v3y = $y1;
    }
    $vertices []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z.' }';
    $vertices []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z.' }';
    $vertices []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z.' }';

    $zd = 1;

    array_push($sides2,
      $v1x, $v1y, $z,
      $v1x, $v1y, $z+$zd,
      $v2x, $v2y, $z,
      $v1x, $v1y, $z+$zd,
      $v2x, $v2y, $z,
      $v2x, $v2y, $z+$zd,
      
      $v2x, $v2y, $z,
      $v2x, $v2y, $z+$zd,
      $v3x, $v3y, $z,
      $v2x, $v2y, $z+$zd,
      $v3x, $v3y, $z,
      $v3x, $v3y, $z+$zd,
      
      $v3x, $v3y, $z,
      $v3x, $v3y, $z+$zd,
      $v1x, $v1y, $z,
      $v3x, $v3y, $z+$zd,
      $v1x, $v1y, $z,
      $v1x, $v1y, $z+$zd
    );
    
    $zd = .5;

    $sides []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z+$zd.' }';
    $sides []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z+$zd.' }';
    $sides []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z+$zd.' }';

    $sides []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z+$zd.' }';
    $sides []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v2x.', "y": '.$v2y.', "z": '.$z+$zd.' }';
    $sides []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z+$zd.' }';

    $sides []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z+$zd.' }';
    $sides []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v3x.', "y": '.$v3y.', "z": '.$z+$zd.' }';
    $sides []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z.' }';
    $sides []= '          { "x": '.$v1x.', "y": '.$v1y.', "z": '.$z+$zd.' }';

    $flip = !$flip;
  }
  
}

$xw = 70;
$ym = 123;
$zd = 2;
$vertices []= '          { "x": '.-$xw.', "y": '.$ym.', "z": '.$zd.' }';
$vertices []= '          { "x": '.$xw.', "y": '.$ym.', "z": '.$zd.' }';
$vertices []= '          { "x": '.-$xw.', "y": '.$ym.', "z": 34 }';
$vertices []= '          { "x": '.$xw.', "y": '.$ym.', "z": '.$zd.' }';
$vertices []= '          { "x": '.-$xw.', "y": '.$ym.', "z": 34 }';
$vertices []= '          { "x": '.$xw.', "y": '.$ym.', "z": 34 }';

// Output for vertex shader
// echo join('f,', $sides2)."f\n"; return;
?>
{
  /**
   * Generated by scripts/generateHapticTriangle.php - do not edit manually
   * https://github.com/Apotheneum/Apotheneum
   */

  "label": "Haptic-Triangle",
  "tag": "haptic-triangle",
  "parameters": {
    "host": { "type": "string", "label": "Host", "default": "10.0.1.201", "description": "Haptics IP" },
    "channel": { "type": "int", "label": "Channel", "default": 0, "min": 0, "description": "DMX channel offset" },
    "outputEnabled": { "label": "On", "type": "boolean", "default": false, "description": "DMX Output On" }
  },
  "components": [
    {
      "type": "points",
      "tag": "hapticMotors",
      "coords": [
<?php echo implode(",\n", $motors)."\n"; ?>
      ],
      "output": {
        "enabled": "$outputEnabled",
        "protocol": "artnet",
        "host": "$host",
        "channel": "$channel",
        "byteOrder": "w"
      }
    },
    {
      "type": "points",
      "tag": "hapticLights",
      "pointSize": "0",
      "coords": [
<?php echo implode(",\n", $lights)."\n"; ?>
      ],
      "output": {
        "enabled": "$outputEnabled",
        "protocol": "artnet",
        "host": "$host",
        "channel": "96 + $channel",
        "byteOrder": "w"
      }
    }
  ],
  "ui": {
    "meshes": [
      {
        "type": "uniformFill",
        "color": "0xff141414",
        "vertices": [
<?php echo implode(",\n", $vertices )."\n"; ?>
        ]
      }
    ]
  }
}
<?php
/*
 * Leftover code for sides in UI mesh

,
      {
        "type": "uniformFill",
        "color": "0xff332011",
        "vertices": [
<?php echo implode(",\n", $sides )."\n"; ?>
        ]
      }
*/
